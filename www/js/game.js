// Generated by CoffeeScript 1.6.2
(function() {
  var Game,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game = (function() {
    function Game(levelNumber) {
      this.mainLoop = __bind(this.mainLoop, this);
      this.levelUp = __bind(this.levelUp, this);
      this.keyUp = __bind(this.keyUp, this);
      this.keyDown = __bind(this.keyDown, this);
      var body, bodyDef, gravity, preventDefault,
        _this = this;

      this.levelNumber = levelNumber;
      gravity = new b2Vec2(0, 15 * b2Scale);
      this.quit = false;
      this.entities = [];
      this.bases = [];
      this.basesDestroyed = 0;
      this.world = new b2World(gravity, true);
      bodyDef = new b2BodyDef();
      bodyDef.type = b2Body.b2_staticBody;
      bodyDef.position.x = 0;
      bodyDef.position.y = 0;
      bodyDef.angle = 0;
      this.terrainBody = this.world.CreateBody(bodyDef);
      body = $("body");
      preventDefault = function(func) {
        return function(event) {
          var r;

          r = func(event);
          event.preventDefault();
          return r;
        };
      };
      body.keydown(this.keyDown);
      body.keyup(this.keyUp);
      this.pressedKeys = {};
      this.terminal = new Terminal();
      if (this.levelNumber === 1) {
        this.terminal.display("Destroy the missile bases by landing on them...");
      } else {
        this.terminal.display("Level " + this.levelNumber + "...");
      }
      this.scene = new THREE.Scene();
      this.camera = new THREE.OrthographicCamera(-window.global.width / 4, window.global.width / 4, -window.global.height / 4, window.global.height / 4, -10, 3000);
      this.camera.position.z = 1000;
      this.scene.add(this.camera);
      this.lander = new Lander(this);
      new THREE.JSONLoader().load("js/level" + this.levelNumber + ".js", function(model) {
        var a, b, bone, count, countEdge, edge, edges, face, v1, v2, verts, x, y, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;

        _this.level = new THREE.Mesh(model, global.levelMaterial);
        _this.scene.add(_this.level);
        _this.level.position.x = 0;
        _this.level.position.y = 0;
        _this.level.position.z = -4;
        _this.level.scale.y = -1;
        _this.level.scale.x = 1;
        verts = model.vertices;
        edges = {};
        countEdge = function(a, b) {
          var s, v;

          v = [a, b];
          v.sort();
          a = v[0], b = v[1];
          s = "" + a + "-" + b;
          return edges[s] = edges[s] != null ? edges[s] + 1 : 1;
        };
        _ref = model.faces;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          face = _ref[_i];
          countEdge(face.a, face.b);
          countEdge(face.b, face.c);
          if (face.d != null) {
            countEdge(face.c, face.d);
            countEdge(face.d, face.a);
          } else {
            countEdge(face.c, face.a);
          }
        }
        for (edge in edges) {
          count = edges[edge];
          if (count === 1) {
            _ref1 = edge.split("-"), a = _ref1[0], b = _ref1[1];
            v1 = new b2Vec2(verts[a].x * b2Scale, -verts[a].y * b2Scale);
            v2 = new b2Vec2(verts[b].x * b2Scale, -verts[b].y * b2Scale);
            _this.makeEdge(v1, v2);
          }
        }
        _this.basesTotal = model.bones.length;
        _ref2 = model.bones;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          bone = _ref2[_j];
          _ref3 = bone.pos, x = _ref3[0], y = _ref3[1];
          new Rocket({
            game: _this,
            x: x,
            y: -y - 13
          });
          new MissileBase({
            game: _this,
            x: x,
            y: -y
          });
        }
        return _this.launch();
      });
      this.listener = new b2ContactListener();
      this.listener.PostSolve = function(contact, impulse) {
        var fixA, fixB, isContactBetween, maxVel, sumImpulses;

        fixA = contact.GetFixtureA();
        fixB = contact.GetFixtureB();
        isContactBetween = function(id1, id2) {
          return ((fixA.m_userData === id1) && (fixB.m_userData === id2)) || ((fixA.m_userData === id2) && (fixB.m_userData === id1));
        };
        sumImpulses = function(contact) {
          var point, points, totalImpulse, _i, _len;

          points = contact.GetManifold().m_points;
          totalImpulse = 0;
          for (_i = 0, _len = points.length; _i < _len; _i++) {
            point = points[_i];
            totalImpulse += point.m_normalImpulse;
          }
          return totalImpulse;
        };
        if (isContactBetween('terrain', 'landingGear') || isContactBetween('terrain', 'landerSphere')) {
          _this.lander.frameImpulse += sumImpulses(contact);
          maxVel = 0.3;
          if (_this.lander.velD > maxVel) {
            return _this.lander.damage += Math.min(30, (_this.lander.velD - maxVel) * 5);
          }
        }
      };
      this.world.SetContactListener(this.listener);
    }

    Game.prototype.keyDown = function(event) {
      var code, _i, _len, _ref, _results;

      this.pressedKeys[event.keyCode] = true;
      _ref = [37, 38, 39];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        code = _ref[_i];
        if (event.keyCode === code) {
          _results.push(event.preventDefault());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Game.prototype.keyUp = function(event) {
      return this.pressedKeys[event.keyCode] = false;
    };

    Game.prototype.levelUp = function() {
      this.levelNumber += 1;
      return this.quit = true;
    };

    Game.prototype.mainLoop = function(newFrame) {
      var dt, entity, game, steps, _i, _len, _ref;

      global.stats.update();
      dt = this.clock.getDelta();
      if (dt > 2) {
        dt = 0.01;
      }
      if (this.pressedKeys[82]) {
        this.quit = true;
      }
      if (this.quit) {
        if (this.levelNumber === 4) {
          $("canvas").hide();
          $("#winscreen").show();
        } else {
          game = new Game(this.levelNumber);
        }
        return;
      } else {
        requestAnimationFrame(this.mainLoop);
      }
      this.lander.steering = 0;
      if (this.pressedKeys[37]) {
        this.lander.steering = -1;
      }
      if (this.pressedKeys[39]) {
        this.lander.steering = 1;
      }
      this.lander.thrust = this.pressedKeys[38] ? 1 : 0;
      if (this.lander.destroyed) {
        this.lander.thrust = 0;
        this.lander.steering = 0;
      }
      this.lander.frameImpulse = 0;
      steps = dt * 60 * 60 * 5;
      this.world.Step(dt, steps, steps);
      this.world.ClearForces();
      _ref = this.entities;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        entity.update(dt);
      }
      if (this.lander.damage >= 100) {
        this.lander.damage = 100;
        if (this.lander.destroyed == null) {
          this.terminal.display("Houston, we have a problem...");
          this.terminal.display("The Lander is kaputt. Press 'r'");
          this.lander.destroyed = true;
        }
      }
      this.camera.position.x = this.lander.mesh.position.x;
      this.camera.position.y = this.lander.mesh.position.y;
      global.renderer.render(this.scene, this.camera);
      ctx.clearRect(0, 0, 200, 100);
      ctx.fillStyle = "#00ff22";
      ctx.font = "bold 13pt vt220";
      ctx.fillText("Fuel: " + (this.lander.fuel.toFixed(1)) + "s", 0, 15);
      ctx.fillText("Damage: " + (this.lander.damage.toFixed(1)) + "%", 0, 30);
      ctx.fillText("Bases destroyed: " + this.basesDestroyed + "/" + this.basesTotal, 0, 45);
      this.terminal.update(dt);
      return this.terminal.draw();
    };

    Game.prototype.launch = function() {
      this.clock = new THREE.Clock();
      this.lastFrame = new Date().getTime();
      if (global.music != null) {
        global.music.setVolume(global.musicVolume);
      }
      if (global.engine != null) {
        global.engine.setVolume(0);
        global.engine.play();
      }
      return this.mainLoop();
    };

    Game.prototype.makeEdge = function(v1, v2) {
      var fixtureDef, shape;

      fixtureDef = new b2FixtureDef();
      fixtureDef.restitution = 0.1;
      fixtureDef.density = 2.0;
      fixtureDef.friction = 0.7;
      fixtureDef.userData = "terrain";
      shape = new b2PolygonShape.AsEdge(v1, v2);
      fixtureDef.shape = shape;
      return this.terrainBody.CreateFixture(fixtureDef);
    };

    return Game;

  })();

}).call(this);
