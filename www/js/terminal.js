// Generated by CoffeeScript 1.6.2
/*
# Retro-looking Terminal Emulator
*/


(function() {
  var Terminal,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Terminal = (function() {
    function Terminal() {
      this.display = __bind(this.display, this);      this.queuedLines = [];
      this.displayedLines = [];
      this.column = 0;
      this.ctx = $("canvas#terminal")[0].getContext('2d');
      this.removalTime = 0;
    }

    Terminal.prototype.update = function(dt) {
      var currentLineWidth, line;

      if (this.displayedLines.length > 0) {
        this.column += dt * 15;
        currentLineWidth = this.displayedLines[this.displayedLines.length - 1].length;
        this.removalTime += dt;
        if (this.removalTime > 5) {
          if (this.displayedLines.length > 0) {
            line = this.displayedLines.shift();
            if (this.displayedLines.length > 0) {
              currentLineWidth = this.displayedLines[this.displayedLines.length - 1].length;
            } else {
              currentLineWidth = -1;
            }
          }
          this.removalTime = 0;
        }
      } else {
        currentLineWidth = -1;
        this.removalTime = 0;
      }
      if (this.column > currentLineWidth) {
        this.column = Math.max(0, currentLineWidth);
        if (this.queuedLines.length > 0) {
          line = this.queuedLines.shift();
          this.displayedLines.push(line);
          this.column = 0;
          if (this.displayedLines.length === 1) {
            return this.removalTime = 0;
          }
        }
      }
    };

    Terminal.prototype.display = function(line) {
      return this.queuedLines.push(line);
    };

    Terminal.prototype.draw = function() {
      var i, lineH, numLines, y, _i, _ref, _ref1;

      this.ctx.clearRect(0, 0, 500, 500);
      this.ctx.fillStyle = "#00ff22";
      this.ctx.font = "bold 13pt vt220";
      numLines = this.displayedLines.length;
      y = 0;
      lineH = 15;
      if (numLines > 1) {
        for (i = _i = _ref = Math.max(0, numLines - 5), _ref1 = Math.max(0, numLines - 2); _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
          this.ctx.fillText(this.displayedLines[i], 0, y + lineH);
          y += lineH;
        }
      }
      if (numLines > 0) {
        return this.ctx.fillText(this.displayedLines[numLines - 1].substr(0, Math.round(this.column)), 0, y + lineH);
      }
    };

    return Terminal;

  })();

}).call(this);
